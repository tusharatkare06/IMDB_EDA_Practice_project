# -*- coding: utf-8 -*-
"""IMDB_Data_Day3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1efN8_uhZmwyamUA8JGAtXIDjPjrpNMYf
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/imdb_data.csv")

#Lets check whether the data is load or not. check first 5 rows

df.head()

#basic information about dataset.

df.info()

"""- The dataset contain 3348 rows and 12 columns

- There are 6 object data type . 4 integer columns, 2 float columns.

- isAdult column showing int. we need to convert this columns into Yes and No format to analyse the data properly.

- release_date column is an object , which should be converted to date time format or  we seperate the date, year and month for better analysis.
"""

#lets check for the missing values.

df.isnull().sum()

"""- gross (51 missing values )

- gross represent total earning of a movies. missing values may indicate that data was unavailable or the movie is underperformed.

-possible solution - 1 -missing values replace with mean or median

2 - drop rows with missing values - 51 rows will be droped from the dataset

3 - If budget is available . then we estimate the gross using a median.


- missing release dates - incomplete record.
- possible solution rop the rows.
"""

#lets replace the missing values of gross with KNN imputation

from sklearn.impute import KNNImputer

imputer = KNNImputer(n_neighbors=5)

df[['budget', 'gross']] = imputer.fit_transform(df[['budget', 'gross']])

df.isnull().sum()

#drop release date rows

df = df.dropna(subset=['release_date'])

df.shape

"""- After successfully removing the null values we have clean dataset.

- total 3343 rows and 12 columns.

- so lets start to do EDA
"""

df.columns

#lets find out  How many unique movies are in the dataset?

df['id'].nunique()

"""so we have 3343 unique movies. so that mean we dont have any duplicated values in the dataset."""

#lets check the overall distribution of movie runtime.

plt.figure(figsize=(8,6))
sns.histplot(df['runtimeMinutes'], bins=60, kde=True, color='royalblue')
plt.xlabel("Runtime(minutes)")
plt.ylabel("Count of the movies")
plt.title("Distribution of Movie Runtime")

#as we see the distribution. it seems like normal distribution. but lets check for the outliers also

plt.figure(figsize=(8,6))
sns.boxplot(df['runtimeMinutes'])
plt.xlabel("Runtime(minutes)")
plt.title("Boxplot of Movie Runtime")
plt.savefig("Runtime.png", dpi=300)

#lets check How many movies are marked as "Adult" (isAdult=1) vs. non-adult (isAdult=0)?

df['isAdult'].unique()

"""- as weseen we have only one category in adult section.

- that mean all movies is only for Adult

- so for better analysis we drop the adult column
"""

df.drop(columns=['isAdult'], inplace=True)

#What are the top 10 most common movie genres?

df.head(1)

genres_list = df['genres'].str.split(",").explode()

genres_list

genres_counts = genres_list.value_counts().head(10)

genres_counts

plt.figure(figsize=(12,8))
sns.barplot(x=genres_counts.index, y=genres_counts.values, palette='viridis')
plt.title("Top 10 most common genres")
plt.xlabel("Top 10 Generes")
plt.ylabel("Number of movies")

"""- Drama is the most dminant genre with 1542 movies

-comedy and action are almost eqal ~ 1170

- Adventure , crime and thriller are strong contenders -

-romance , horror, mystery an si-fi are mid tier genres.
"""

#What is the distribution of averageRating? Are ratings skewed toward high or low values?

df.columns

plt.figure(figsize=(12,8))
sns.histplot(df['averageRating'], bins = 30, kde=True)
plt.xlabel("AverageRating")
plt.ylabel("Counts")
plt.title("Distribution of Average Rating")

#lets see how many movies are very low and very high rated

plt.figure(figsize=(8,6))
sns.boxplot(x= df['averageRating'])
plt.xlabel("Average Rating")
plt.title("Boxplot of average rating")

"""- Most movies are well rated

- The majority of rating are above 6  to 8 indicating positive bias in user reviews.

-some movies are high rated movies. looks like outliers.

-there are fewer low rated movies, looks outlier, meaning people dontbother to rate them. low rated movies. - prabalely disliked by audiences.
"""

#How many movies have received over 100,000 votes (numVotes > 100,000)?

high_vote_movies = df[df['numVotes']>100000]

high_vote_movies.shape

plt.figure(figsize=(12,8))
sns.histplot(df['numVotes'], bins = 80, kde= True)
plt.xlabel("Number of votes")
plt.ylabel("Counts")
plt.title("Distribution of movies votes")

#7. What is the distribution of movie budgets?

plt.figure(figsize=(12,5))
sns.histplot(df['budget'], bins = 30, kde=True)
plt.xlabel("Budget of Movies")
plt.ylabel("Count")
plt.title("Distribution of Movies Budget")

"""- the budget distriution id right skewed

- many movies had low budget movies

- few movies only had high budgets
"""

plt.figure(figsize=(8,6))
sns.boxplot(x= df['budget'])
plt.xlabel("Budget of movies")
plt.title("Boxplot of Movies Budget")

#. What is the distribution of gross revenue?

df.columns

plt.figure(figsize=(12,5))
sns.histplot(df['gross'], bins = 30, kde=True)
plt.xlabel("gross revenue of Movies")
plt.ylabel("Count")
plt.title("Distribution of Movies Gross Revenue")

plt.figure(figsize=(8,6))
sns.boxplot(x= df['gross'])
plt.xlabel("gross revenue of movies")
plt.title("Boxplot of Movies gross revenue")

"""- gross revenue distribution is right skewed

- a few blockbuster movies earning massive amount

- there outliers movies with extream earnings.
"""

#What is the average budget and gross revenue of movies?

avg_budget = df['budget'].mean()

avg_gross = df['gross'].mean()

avg_budget

avg_gross

plt.figure(figsize=(6,4))
sns.barplot(x=['avg_budget', 'avg_gross'],
            y = [avg_budget, avg_gross], palette='viridis')
plt.title("Comparision of average budget vs. gross")

"""- average gross exceed the average budget, indicating overall profitability"""

